name: Maven Package
on:
  push:
    branches: [ homolog ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      jar_version: ${{ steps.bump.outputs.jar_version }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Bump jar version
      id: bump
      run: |
        POMPATH=my-app
        OLD_VERSION=$(cd $POMPATH && mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        BUMP_MODE="none"
        old="$OLD_VERSION"
        parts=( ${old//./ } )
        bv=$((parts[2] + 1))
        NEW_VERSION="${parts[0]}.${parts[1]}.${bv}"
        echo "pom.xml at" $POMPATH "will be bumped from" $OLD_VERSION "to" $NEW_VERSION
        mvn -q versions:set -DnewVersion="${NEW_VERSION}" --file $POMPATH/pom.xml
        echo ::set-output name=jar_version::${NEW_VERSION}
    - name: Build a package
      run: mvn -B package --file my-app/pom.xml

    - name: Temporarily save jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: jar-artifact
        path: ${{ github.workspace }}/my-app/target/*.jar
        retention-days: 1

  deploy:
    runs-on: ubuntu-18.04
    needs: build

    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
          name: jar-artifact
          path: my-app/target/

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PWD }}
  
    - name: Build and push Docker images
      uses: docker/build-push-action@v2.4.0
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          tallesalencar/petclinic:latest
          tallesalencar/petclinic:${{needs.build.outputs.jar_version}}

    - name: Docker push
      run: |
        docker push tallesalencar/petclinic:${{needs.build.outputs.jar_version}}
        docker push tallesalencar/petclinic:latest
  terraform:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Criar arquivo terrafor vars
        run: |
          cd terraform
          touch terraform.tfvars
          echo do_token="${{secrets.DO_TOKEN}}" >> terraform.tfvars
          echo nome_cluster="${{secrets.NOME_CLUSTER}}" >> terraform.tfvars
          cat terraform.tfvars
      - name: Criar arquivo terrafor vars
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
  run:
    runs-on: ubuntu-18.04
    needs: [build, deploy, terraform]
    steps:
      - uses: actions/checkout@v2
  
      - name: Kubernetes set context.
        uses: Azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.K8S_CONFIG}}
          
      - name: Deploy Aplicação Digital Ocean
        uses: Azure/k8s-deploy@v3.0
        with:
          images: tallesalencar/petclinic:latest
          manifests: |
            k8s/deployment.yaml